# -*- coding: utf-8 -*-
"""expert.ipynb

Automatically generated by Colaboratory.


"""
from __future__ import absolute_import, division, print_function, unicode_literals

# TensorFlow and tf.keras
import tensorflow as tf

import os
from tensorflow.keras import layers

from tensorflow import keras

# Helper libraries
import imageio
import numpy as np
import time
import matplotlib.pyplot as plt
from IPython import display
import PIL
import glob
from scipy import signal
print(tf.__version__)

InputLength = 400
Batch = 5
"""######生成器"""

class Generator(tf.keras.Model):
  def __init__(self, InputLength=InputLength, Batch=Batch):
    super(Generator, self).__init__()
    self.start = layers.Dense(InputLength,input_shape=(InputLength,1),dtype='float32')
    self.active = layers.LeakyReLU(alpha=0.2)
    self.cov = layers.Conv1D(filters=32,kernel_size = 3, padding = 'causal')
    self.out = layers.Conv1D(filters = 1,kernel_size = 5, activation='tanh',padding = 'causal')
    self.dense = layers.Dense(1,dtype='float32')
    self.inference_net = tf.keras.Sequential(
      [
       self.active,
       self.cov,
       self.active,
       self.cov,
       self.active,
       self.cov,
       self.active,
       self.out

      ]
    )
  def call(self, inputs):
    x = self.start(inputs)
    x = self.inference_net(x)
    return x
generator = Generator()

"""######判别器"""

class Discriminator(tf.keras.Model):
  def __init__(self, InputLength=InputLength, Batch=Batch):
    super(Discriminator, self).__init__()
    self.start = layers.Conv1D(filters = 32,kernel_size = 3, padding = 'causal',input_shape=(InputLength,1))
    self.active = layers.LeakyReLU(alpha=0.2)
    self.cov = layers.Conv1D(filters=32, kernel_size = 3, padding = 'causal')
    self.pool = layers.MaxPooling1D(pool_size=2)
    self.flaten = layers.Flatten(input_shape=(InputLength,1))
    self.dense = layers.Dense(64,dtype='float32')
    self.drop = layers.Dropout(0.4)
    self.out = layers.Dense(1, activation='tanh',dtype='float32')
    self.inference_net = tf.keras.Sequential(
      [
       self.start,
       self.active,
       self.pool,
       self.cov,
       self.active,
       self.pool,
       self.flaten,
       self.dense,
       self.drop,
       self.active,
       self.out,
      ]
    )
  def call(self, inputs):
    x = self.inference_net(inputs)
    return x
discriminator = Discriminator()

"""######测试运行"""

#测试运行  通过
noise = tf.random.normal([10,InputLength,1])
noise2 = tf.random.normal([10,InputLength,1])
generateData = generator(noise)
yp = discriminator(noise)
yr = discriminator(noise)
print(yr.shape)
print(yp.shape)
print(generateData.shape)

"""######定义损失函数和优化器"""

# 定义混合函数
def mixSignal(real,fake):
  seed = np.random.randint(0,InputLength/2,1)[0]
  mix = tf.concat((real[:,seed:int(InputLength/2+seed),:],fake[:,seed:int(InputLength/2+seed),:]),1)
  return mix
def wasserstein_loss(y_true, y_pred):
  return tf.reduce_mean(y_true * y_pred)
def gradient_penalty_loss(mix):

  """
  Computes gradient penalty based on prediction and weighted real / fake samples
  """
  with tf.GradientTape() as g:
    g.watch(mix)
    y = discriminator(mix)
  gradients = g.gradient(y, mix) 
  # compute the euclidean norm by squaring ...
  gradients_sqr = tf.math.pow(gradients,2*tf.ones_like(gradients))
  #   ... summing over the rows ...
  gradients_sqr_sum = tf.reduce_sum(gradients_sqr,axis=np.arange(1, len(gradients_sqr.shape)))
  #   ... and sqrt
  gradient_l2_norm = tf.math.sqrt(gradients_sqr_sum)  
  # compute lambda * (1 - ||grad||)^2 still for each single sample
  gradient_penalty = tf.math.pow((1 - gradient_l2_norm),2*tf.ones_like(gradient_l2_norm))
  # return the mean as loss over all the batch samples
  return tf.reduce_mean(gradient_penalty)

# 判别损失 判别器要做两件事情，既要真的趋近于-1，又要假的趋近于1
def discriminator_loss(real_output, fake_output, mix):
    real_loss = wasserstein_loss(-0.5*tf.ones_like(real_output), real_output)
    fake_loss = wasserstein_loss(0.5*tf.ones_like(fake_output), fake_output)
    mix_loss = gradient_penalty_loss(mix)
    total_loss = real_loss+fake_loss+10*mix_loss
    return total_loss
# 生成损失  生成器使得假的趋近于-1
def generator_loss(fake_output,mix_output):
    mix_loss = wasserstein_loss(-0.5*tf.ones_like(fake_output), fake_output)
    fake_loss = wasserstein_loss(-0.5*tf.ones_like(fake_output), fake_output)
    return fake_loss+mix_loss

generator_optimizer = tf.keras.optimizers.Adam(lr=0.00001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
discriminator_optimizer = tf.keras.optimizers.Adam(lr=0.00001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)

checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt")
checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,
                                 discriminator_optimizer=discriminator_optimizer,
                                 generator=generator,
                                 discriminator=discriminator)

"""######定义训练"""

# 单步训练
# 注意 `tf.function` 的使用
# 该注解使函数被“编译”
@tf.function
def train_step(Data):
  for i in range(5):
    noise = tf.random.normal([Batch, InputLength,1])
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
      generated_Data = generator(noise, training=True)
      mix_Data = mixSignal(Data,generated_Data)

      real_output = discriminator(Data, training=True)
      fake_output = discriminator(generated_Data, training=True)
      mix_output = discriminator(mix_Data, training=True)

      gen_loss = generator_loss(fake_output,mix_output)
      disc_loss = discriminator_loss(real_output, fake_output,mix_Data)

    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)
    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
    if i==4:
      generator_optimizer.apply_gradients(zip(gradients_of_generator, generator.trainable_variables))
    discriminator_optimizer.apply_gradients(zip(gradients_of_discriminator, discriminator.trainable_variables))
  return gen_loss,disc_loss

# 定义训练
def train(dataset, epochs):
  for epoch in range(epochs):
    start = time.time()
    num = 0
    for image_batch in dataset:
      gen_loss,disc_loss = train_step(image_batch)
      num = num+1
      if num%500==0:
        print ('generator loss {} discriminator loss {} sec'.format(gen_loss, disc_loss))
        # 继续进行时为 GIF 生成图像
        display.clear_output(wait=True)
        generate_and_save_images(generator,
                    epoch + 1,
                    seed)
    # 每 15 个 epoch 保存一次模型
    if (epoch + 1) % 15 == 0:
      checkpoint.save(file_prefix = checkpoint_prefix)

    print ('Time for epoch {} is {} sec'.format(epoch + 1, time.time()-start))
    

  # 最后一个 epoch 结束后生成图片
  display.clear_output(wait=True)
  generate_and_save_images(generator,
              epochs,
              seed)

def generate_and_save_images(model, epoch, test_input):
    predictions = model(test_input, training=False)
    fig, axs = plt.subplots(5, 1)
    for i in range(5):
        plot_sigs = predictions[i].numpy()
        axs[i].plot(plot_sigs)
        axs[i].axis('off')
    
    plt.savefig('images/'+database+'_{:04d}.png'.format(epoch))
    plt.show()
#     plt.close()

"""######加载数据"""

# 数据形状 [BATCH,InputLength,1]
trainData = tf.cast(trainData,'float32')

train_dataset = tf.data.Dataset.from_tensor_slices(trainData).shuffle(60000).batch(Batch)

# 我们将重复使用该种子（因此在动画 GIF 中更容易可视化进度）
seed = tf.random.normal([5, InputLength, 1])

"""######训练保存"""

train(train_dataset, 10000)

"""#####恢复模型"""

checkpoint.restore(tf.train.latest_checkpoint(checkpoint_dir))

"""#####生成GIF"""

# 使用 epoch 数生成单张图片
def display_image(epoch_no):
  return PIL.Image.open('images/'+database+'_{:04d}.png'.format(epoch_no))

anim_file = 'ganone.gif'

with imageio.get_writer(anim_file, mode='I') as writer:
  filenames = glob.glob('images/'+database+'*.png')
  filenames = sorted(filenames)
  last = -1
  for i,filename in enumerate(filenames):
    frame = 2*(i**0.5)
    if round(frame) > round(last):
      last = frame
    else:
      continue
    image = imageio.imread(filename)
    writer.append_data(image)
  image = imageio.imread(filename)
  writer.append_data(image)

import IPython
if IPython.version_info > (6,2,0,''):
  display.Image(filename=anim_file)





